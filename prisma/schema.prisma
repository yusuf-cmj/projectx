// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// MySQL bağlantı konfigürasyonu
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli - kimlik doğrulama için
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Ekstra kullanıcı alanları buraya eklenebilir
  role          String    @default("user") // user, admin, vb.
  
  // Burada session ve accounts ilişkileri eklenebilir (ihtiyaç duyulursa)
  sessions      Session[]
  accounts      Account[]
}

// NextAuth hesapları
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Kullanıcı oturumları
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Şifre sıfırlama tokenları
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Film Replikleri Modeli
model FilmQuote {
  id            String   @id @default(cuid())
  quote         String   @db.Text // Karakterin söylediği replik
  character     String   // Karakterin adı
  title         String   // Filmin adı
  to            String?  // Replik kime söylendi (opsiyonel, birden fazla olabilir, belki ayrı model?)
  voice_record  String?  // Ses kaydı dosyasının yolu/URL'si
  image         String?  // Sahne görüntüsünün yolu/URL'si
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([character])
  @@index([title])
}

// Oyun Replikleri Modeli
model GameQuote {
  id            String   @id @default(cuid())
  quote         String   @db.Text // Karakterin söylediği replik
  character     String   // Karakterin adı
  title         String   // Oyunun adı
  to            String?  // Replik kime söylendi (opsiyonel, birden fazla olabilir, belki ayrı model?)
  voice_record  String?  // Ses kaydı dosyasının yolu/URL'si
  image         String?  // Sahne görüntüsünün yolu/URL'si
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([character])
  @@index([title])
}
